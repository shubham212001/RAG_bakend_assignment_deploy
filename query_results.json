{
    "Speech_ACM (5).pdf": {
        "History of git": "",
        "Santosh Kumar": "Santosh  Kumar  is  working  as  an  Assistant  Professor  with  the  Department\nof Computer Science and Engineering at IIIT-Naya Raipur, Chhattisgarh (e-\nmail:santosh@iiitnr.edu.in). L\nANGUAGEthe  essence  of  human  connection  and  cul-\ntural   identity   serves   as   a   conduit   for   transmitting\nknowledge, traditions, and heritage [1]Amidst the vast array\nof languages spoken worldwide, a stark reality emerges: be-\ntween 6,000 to 7,000 languages currently exist, yet between\n50% and 90% of them face severe endangerment or extinc-\ntion  by  the  dawn  of  the  22nd  century  [4]. [18]  Mehta,  D.,  Santy,  S.,  Mothilal,  R.,  Srivastava,  B.,  Sharma,  A.,\nShukla,  A.,  Prasad,  V.,  U,  V.,  Sharma,  A.,  &  Bali,  K. (2020)."
    },
    "history_of_git.pdf": {
        "History of git": "The History of Git\nIntroduction\nGit  is  a  distributed  version  control  system  that  has  become  an  essential  tool  for  software\ndevelopment. Created by Linus Torvalds in 2005, Git was designed to address the growing need for\nan efficient, flexible, and reliable system to track changes in source code. Today, it is widely used by\ndevelopers around the world, powering open-source and enterprise-level projects alike. The Origins of Git\nBefore Git, the Linux kernel development team relied on a proprietary version control system called\nBitKeeper. However, in 2005, licensing conflicts led to the revocation of free access to BitKeeper for\nopen-source  developers. - Efficient Branching and Merging: Git makes it easy to create and merge branches, encouraging a\ncollaborative workflow. Key Developments in Git\nAfter  its  initial  release  in  2005,  Git  underwent  several  refinements  and  improvements. Some  key\nmilestones in its evolution include:\n- 2006: The first major public release (Git 1.0) was launched, providing a stable tool for developers. - 2007: GitHub was founded, making Git more accessible and promoting widespread adoption. - 2010: Git 2.0 introduced performance enhancements and better usability. -  2013:  Microsoft  announced  its  adoption  of  Git  for  Windows  development,  signaling  industry-wide\nacceptance. -  2018:  GitHub  was  acquired  by  Microsoft,  further  cementing  Git's  role  in  enterprise  software\ndevelopment. Git's Impact on Software Development\nGit has fundamentally transformed the way developers collaborate. Some of its key impacts include:\n- Open Source Collaboration: Projects like Linux, Node.js, and TensorFlow rely on Git for distributed\ndevelopment. -  Enterprise  Adoption:  Major  companies,  including  Google,  Microsoft,  and  Facebook,  use  Git  for\nsoftware development. -  CI/CD  Integration:  Git  seamlessly  integrates  with  continuous  integration  and  deployment  (CI/CD)\npipelines. - Standardization: Git has become the de facto standard for version control, replacing older systems\nlike Subversion (SVN) and Mercurial. Conclusion\nFrom  its  creation  out  of  necessity  to  its  dominance  in  modern  software  development,  Git  has\nrevolutionized version control. Its distributed architecture, speed, and flexibility make it an invaluable\ntool  for  both  individual  developers  and  large  organizations. This  created  an  urgent  need  for  a  new  system  that  could  handle  the\ncomplexity and scale of Linux development while maintaining speed and efficiency. Linus  Torvalds,  the  creator  of  Linux,  took  on  the  challenge  of  developing  a  new  version  control\nsystem from scratch. His primary goals were:\n- Speed: Git needed to be fast to handle large repositories efficiently. -  Distributed  Architecture:  Unlike  centralized  systems,  Git  allows  developers  to  work  independently\nand merge changes asynchronously. - Data Integrity: Every commit in Git is secured with a cryptographic hash to prevent data corruption.",
        "Santosh Kumar": ""
    }
}