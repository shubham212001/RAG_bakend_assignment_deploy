import { ConnectionREST } from '../index.js';
import {
  BackupsPermission,
  ClusterPermission,
  CollectionsPermission,
  DataPermission,
  NodesPermission,
  Permission,
  PermissionsInput,
  Role,
  RolesPermission,
  User,
} from './types.js';
export interface Roles {
  listAll: () => Promise<Record<string, Role>>;
  ofCurrentUser: () => Promise<Record<string, Role>>;
  byName: (roleName: string) => Promise<Role | null>;
  byUser: (user: string) => Promise<Record<string, Role>>;
  assignedUsers: (roleName: string) => Promise<Record<string, User>>;
  delete: (roleName: string) => Promise<void>;
  create: (roleName: string, permissions: PermissionsInput) => Promise<Role>;
  assignToUser: (roleNames: string | string[], user: string) => Promise<void>;
  exists: (roleName: string) => Promise<boolean>;
  revokeFromUser: (roleNames: string | string[], user: string) => Promise<void>;
  addPermissions: (roleName: string, permissions: PermissionsInput) => Promise<void>;
  removePermissions: (roleName: string, permissions: PermissionsInput) => Promise<void>;
  hasPermission: (roleName: string, permission: Permission) => Promise<boolean>;
}
declare const roles: (connection: ConnectionREST) => Roles;
export declare const permissions: {
  backup: (args: { collection: string | string[]; manage?: boolean }) => BackupsPermission[];
  cluster: (args: { read?: boolean }) => ClusterPermission[];
  collections: (args: {
    collection: string | string[];
    create_collection?: boolean;
    read_config?: boolean;
    update_config?: boolean;
    delete_collection?: boolean;
  }) => CollectionsPermission[];
  data: (args: {
    collection: string | string[];
    create?: boolean;
    read?: boolean;
    update?: boolean;
    delete?: boolean;
  }) => DataPermission[];
  nodes: (args: {
    collection: string | string[];
    verbosity?: 'verbose' | 'minimal';
    read?: boolean;
  }) => NodesPermission[];
  roles: (args: { role: string | string[]; read?: boolean; manage?: boolean }) => RolesPermission[];
};
export default roles;
