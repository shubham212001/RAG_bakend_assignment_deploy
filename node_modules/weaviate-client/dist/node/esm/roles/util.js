export class PermissionGuards {}
PermissionGuards.isBackups = (permission) => permission.action === 'manage_backups';
PermissionGuards.isCluster = (permission) => permission.action === 'read_cluster';
PermissionGuards.isCollections = (permission) =>
  [
    'create_collections',
    'delete_collections',
    'read_collections',
    'update_collections',
    'manage_collections',
  ].includes(permission.action);
PermissionGuards.isData = (permission) =>
  ['create_data', 'delete_data', 'read_data', 'update_data', 'manage_data'].includes(permission.action);
PermissionGuards.isNodes = (permission) => permission.action === 'read_nodes';
PermissionGuards.isRoles = (permission) => permission.action === 'manage_roles';
PermissionGuards.isPermission = (permissions) => !Array.isArray(permissions);
PermissionGuards.isPermissionArray = (permissions) =>
  Array.isArray(permissions) && permissions.every(PermissionGuards.isPermission);
PermissionGuards.isPermissionMatrix = (permissions) =>
  Array.isArray(permissions) && permissions.every(PermissionGuards.isPermissionArray);
PermissionGuards.isPermissionTuple = (permissions) =>
  Array.isArray(permissions) &&
  permissions.every(
    (permission) =>
      PermissionGuards.isPermission(permission) || PermissionGuards.isPermissionArray(permission)
  );
export class Map {}
Map.flattenPermissions = (permissions) => (!Array.isArray(permissions) ? [permissions] : permissions.flat(2));
Map.permissionToWeaviate = (permission) => {
  if (PermissionGuards.isBackups(permission)) {
    return { backups: { collection: permission.collection }, action: permission.action };
  } else if (PermissionGuards.isCluster(permission)) {
    return { action: permission.action };
  } else if (PermissionGuards.isCollections(permission)) {
    return { collections: { collection: permission.collection }, action: permission.action };
  } else if (PermissionGuards.isData(permission)) {
    return { data: { collection: permission.collection }, action: permission.action };
  } else if (PermissionGuards.isNodes(permission)) {
    return {
      nodes: { collection: permission.collection, verbosity: permission.verbosity },
      action: permission.action,
    };
  } else if (PermissionGuards.isRoles(permission)) {
    return { roles: { role: permission.role }, action: permission.action };
  } else {
    throw new Error(`Unknown permission type: ${permission}`);
  }
};
Map.roleFromWeaviate = (role) => {
  const out = {
    name: role.name,
    backupsPermissions: [],
    clusterPermissions: [],
    collectionsPermissions: [],
    dataPermissions: [],
    nodesPermissions: [],
    rolesPermissions: [],
  };
  role.permissions.forEach((permission) => {
    var _a;
    if (permission.backups !== undefined) {
      if (permission.backups.collection === undefined) {
        throw new Error('Backups permission missing collection');
      }
      out.backupsPermissions.push({
        collection: (_a = permission.backups) === null || _a === void 0 ? void 0 : _a.collection,
        action: permission.action,
      });
    } else if (permission.action === 'read_cluster') {
      out.clusterPermissions.push({
        action: permission.action,
      });
    } else if (permission.collections !== undefined) {
      if (permission.collections.collection === undefined) {
        throw new Error('Collections permission missing collection');
      }
      out.collectionsPermissions.push({
        collection: permission.collections.collection,
        action: permission.action,
      });
    } else if (permission.data !== undefined) {
      if (permission.data.collection === undefined) {
        throw new Error('Data permission missing collection');
      }
      out.dataPermissions.push({
        collection: permission.data.collection,
        action: permission.action,
      });
    } else if (permission.nodes !== undefined) {
      if (permission.nodes.collection === undefined) {
        throw new Error('Nodes permission missing collection');
      }
      if (permission.nodes.verbosity === undefined) {
        throw new Error('Nodes permission missing verbosity');
      }
      out.nodesPermissions.push({
        collection: permission.nodes.collection,
        verbosity: permission.nodes.verbosity,
        action: permission.action,
      });
    } else if (permission.roles !== undefined) {
      if (permission.roles.role === undefined) {
        throw new Error('Roles permission missing role');
      }
      out.rolesPermissions.push({
        role: permission.roles.role,
        action: permission.action,
      });
    }
  });
  return out;
};
Map.roles = (roles) =>
  roles.reduce((acc, role) => {
    acc[role.name] = Map.roleFromWeaviate(role);
    return acc;
  }, {});
Map.users = (users) =>
  users.reduce((acc, user) => {
    acc[user] = { name: user };
    return acc;
  }, {});
